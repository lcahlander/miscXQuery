xquery version "1.0";    
(:~
The module contains variables for each of the unicode escape sequences at 
<a href="https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references">https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references</a>

 :)
module namespace encchars="http://w3.org/encoded/characters";    

(:               Name                    Escape Sequence     Description :)
declare variable $encchars:quot          := "&#34;";         (: quotation mark (APL quote) :)
declare variable $encchars:amp           := "&#38;";         (: ampersand :)
declare variable $encchars:apos          := "&#39;";         (: apostrophe (apostrophe-quote); see below :)
declare variable $encchars:lt            := "&#60;";         (: less-than sign :)
declare variable $encchars:gt            := "&#62;";         (: greater-than sign :)
declare variable $encchars:nbsp          := "&#160;";        (: no-break space (non-breaking space)[d] :)
declare variable $encchars:iexcl         := "&#161;";        (: inverted exclamation mark :)
declare variable $encchars:cent          := "&#162;";        (: cent sign :)
declare variable $encchars:pound         := "&#163;";        (: pound sign :)
declare variable $encchars:curren        := "&#164;";        (: currency sign :)
declare variable $encchars:yen           := "&#165;";        (: yen sign (yuan sign) :)
declare variable $encchars:brvbar        := "&#166;";        (: broken bar (broken vertical bar) :)
declare variable $encchars:sect          := "&#167;";        (: section sign :)
declare variable $encchars:uml           := "&#168;";        (: diaeresis (spacing diaeresis); see Germanic umlaut :)
declare variable $encchars:copy          := "&#169;";        (: copyright symbol :)
declare variable $encchars:ordf          := "&#170;";        (: feminine ordinal indicator :)
declare variable $encchars:laquo         := "&#171;";        (: left-pointing double angle quotation mark (left pointing guillemet) :)
declare variable $encchars:not           := "&#172;";        (: not sign :)
declare variable $encchars:shy           := "&#173;";        (: soft hyphen (discretionary hyphen) :)
declare variable $encchars:reg           := "&#174;";        (: registered sign (registered trademark symbol) :)
declare variable $encchars:macr          := "&#175;";        (: macron (spacing macron, overline, APL overbar) :)
declare variable $encchars:deg           := "&#176;";        (: degree symbol :)
declare variable $encchars:plusmn        := "&#177;";        (: plus-minus sign (plus-or-minus sign) :)
declare variable $encchars:sup2          := "&#178;";        (: superscript two (superscript digit two, squared) :)
declare variable $encchars:sup3          := "&#179;";        (: superscript three (superscript digit three, cubed) :)
declare variable $encchars:acute         := "&#180;";        (: acute accent (spacing acute) :)
declare variable $encchars:micro         := "&#181;";        (: micro sign :)
declare variable $encchars:para          := "&#182;";        (: pilcrow sign (paragraph sign) :)
declare variable $encchars:middot        := "&#183;";        (: middle dot (Georgian comma, Greek middle dot) :)
declare variable $encchars:cedil         := "&#184;";        (: cedilla (spacing cedilla) :)
declare variable $encchars:sup1          := "&#185;";        (: superscript one (superscript digit one) :)
declare variable $encchars:ordm          := "&#186;";        (: masculine ordinal indicator :)
declare variable $encchars:raquo         := "&#187;";        (: right-pointing double angle quotation mark (right pointing guillemet) :)
declare variable $encchars:frac14        := "&#188;";        (: vulgar fraction one quarter (fraction one quarter) :)
declare variable $encchars:frac12        := "&#189;";        (: vulgar fraction one half (fraction one half) :)
declare variable $encchars:frac34        := "&#190;";        (: vulgar fraction three quarters (fraction three quarters) :)
declare variable $encchars:iquest        := "&#191;";        (: inverted question mark (turned question mark) :)
declare variable $encchars:Agrave        := "&#192;";        (: Latin capital letter A with grave accent (Latin capital letter A grave) :)
declare variable $encchars:Aacute        := "&#193;";        (: Latin capital letter A with acute accent :)
declare variable $encchars:Acirc         := "&#194;";        (: Latin capital letter A with circumflex :)
declare variable $encchars:Atilde        := "&#195;";        (: Latin capital letter A with tilde :)
declare variable $encchars:Auml          := "&#196;";        (: Latin capital letter A with diaeresis :)
declare variable $encchars:Aring         := "&#197;";        (: Latin capital letter A with ring above (Latin capital letter A ring) :)
declare variable $encchars:AElig         := "&#198;";        (: Latin capital letter AE (Latin capital ligature AE) :)
declare variable $encchars:Ccedil        := "&#199;";        (: Latin capital letter C with cedilla :)
declare variable $encchars:Egrave        := "&#200;";        (: Latin capital letter E with grave accent :)
declare variable $encchars:Eacute        := "&#201;";        (: Latin capital letter E with acute accent :)
declare variable $encchars:Ecirc         := "&#202;";        (: Latin capital letter E with circumflex :)
declare variable $encchars:Euml          := "&#203;";        (: Latin capital letter E with diaeresis :)
declare variable $encchars:Igrave        := "&#204;";        (: Latin capital letter I with grave accent :)
declare variable $encchars:Iacute        := "&#205;";        (: Latin capital letter I with acute accent :)
declare variable $encchars:Icirc         := "&#206;";        (: Latin capital letter I with circumflex :)
declare variable $encchars:Iuml          := "&#207;";        (: Latin capital letter I with diaeresis :)
declare variable $encchars:ETH           := "&#208;";        (: Latin capital letter Eth :)
declare variable $encchars:Ntilde        := "&#209;";        (: Latin capital letter N with tilde :)
declare variable $encchars:Ograve        := "&#210;";        (: Latin capital letter O with grave accent :)
declare variable $encchars:Oacute        := "&#211;";        (: Latin capital letter O with acute accent :)
declare variable $encchars:Ocirc         := "&#212;";        (: Latin capital letter O with circumflex :)
declare variable $encchars:Otilde        := "&#213;";        (: Latin capital letter O with tilde :)
declare variable $encchars:Ouml          := "&#214;";        (: Latin capital letter O with diaeresis :)
declare variable $encchars:times         := "&#215;";        (: multiplication sign :)
declare variable $encchars:Oslash        := "&#216;";        (: Latin capital letter O with stroke (Latin capital letter O slash) :)
declare variable $encchars:Ugrave        := "&#217;";        (: Latin capital letter U with grave accent :)
declare variable $encchars:Uacute        := "&#218;";        (: Latin capital letter U with acute accent :)
declare variable $encchars:Ucirc         := "&#219;";        (: Latin capital letter U with circumflex :)
declare variable $encchars:Uuml          := "&#220;";        (: Latin capital letter U with diaeresis :)
declare variable $encchars:Yacute        := "&#221;";        (: Latin capital letter Y with acute accent :)
declare variable $encchars:THORN         := "&#222;";        (: Latin capital letter THORN :)
declare variable $encchars:szlig         := "&#223;";        (: Latin small letter sharp s (ess-zed); see German Eszett :)
declare variable $encchars:agrave        := "&#224;";        (: Latin small letter a with grave accent :)
declare variable $encchars:aacute        := "&#225;";        (: Latin small letter a with acute accent :)
declare variable $encchars:acirc         := "&#226;";        (: Latin small letter a with circumflex :)
declare variable $encchars:atilde        := "&#227;";        (: Latin small letter a with tilde :)
declare variable $encchars:auml          := "&#228;";        (: Latin small letter a with diaeresis :)
declare variable $encchars:aring         := "&#229;";        (: Latin small letter a with ring above :)
declare variable $encchars:aelig         := "&#230;";        (: Latin small letter ae (Latin small ligature ae) :)
declare variable $encchars:ccedil        := "&#231;";        (: Latin small letter c with cedilla :)
declare variable $encchars:egrave        := "&#232;";        (: Latin small letter e with grave accent :)
declare variable $encchars:eacute        := "&#233;";        (: Latin small letter e with acute accent :)
declare variable $encchars:ecirc         := "&#234;";        (: Latin small letter e with circumflex :)
declare variable $encchars:euml          := "&#235;";        (: Latin small letter e with diaeresis :)
declare variable $encchars:igrave        := "&#236;";        (: Latin small letter i with grave accent :)
declare variable $encchars:iacute        := "&#237;";        (: Latin small letter i with acute accent :)
declare variable $encchars:icirc         := "&#238;";        (: Latin small letter i with circumflex :)
declare variable $encchars:iuml          := "&#239;";        (: Latin small letter i with diaeresis :)
declare variable $encchars:eth           := "&#240;";        (: Latin small letter eth :)
declare variable $encchars:ntilde        := "&#241;";        (: Latin small letter n with tilde :)
declare variable $encchars:ograve        := "&#242;";        (: Latin small letter o with grave accent :)
declare variable $encchars:oacute        := "&#243;";        (: Latin small letter o with acute accent :)
declare variable $encchars:ocirc         := "&#244;";        (: Latin small letter o with circumflex :)
declare variable $encchars:otilde        := "&#245;";        (: Latin small letter o with tilde :)
declare variable $encchars:ouml          := "&#246;";        (: Latin small letter o with diaeresis :)
declare variable $encchars:divide        := "&#247;";        (: division sign (obelus) :)
declare variable $encchars:oslash        := "&#248;";        (: Latin small letter o with stroke (Latin small letter o slash) :)
declare variable $encchars:ugrave        := "&#249;";        (: Latin small letter u with grave accent :)
declare variable $encchars:uacute        := "&#250;";        (: Latin small letter u with acute accent :)
declare variable $encchars:ucirc         := "&#251;";        (: Latin small letter u with circumflex :)
declare variable $encchars:uuml          := "&#252;";        (: Latin small letter u with diaeresis :)
declare variable $encchars:yacute        := "&#253;";        (: Latin small letter y with acute accent :)
declare variable $encchars:thorn         := "&#254;";        (: Latin small letter thorn :)
declare variable $encchars:yuml          := "&#255;";        (: Latin small letter y with diaeresis :)
declare variable $encchars:OElig         := "&#338;";        (: Latin capital ligature oe[e] :)
declare variable $encchars:oelig         := "&#339;";        (: Latin small ligature oe[e] :)
declare variable $encchars:Scaron        := "&#352;";        (: Latin capital letter s with caron :)
declare variable $encchars:scaron        := "&#353;";        (: Latin small letter s with caron :)
declare variable $encchars:Yuml          := "&#376;";        (: Latin capital letter y with diaeresis :)
declare variable $encchars:fnof          := "&#402;";        (: Latin small letter f with hook (function, florin) :)
declare variable $encchars:circ          := "&#710;";        (: modifier letter circumflex accent :)
declare variable $encchars:tilde         := "&#732;";        (: small tilde :)
declare variable $encchars:Alpha         := "&#913;";        (: Greek capital letter Alpha :)
declare variable $encchars:Beta          := "&#914;";        (: Greek capital letter Beta :)
declare variable $encchars:Gamma         := "&#915;";        (: Greek capital letter Gamma :)
declare variable $encchars:Delta         := "&#916;";        (: Greek capital letter Delta :)
declare variable $encchars:Epsilon       := "&#917;";        (: Greek capital letter Epsilon :)
declare variable $encchars:Zeta          := "&#918;";        (: Greek capital letter Zeta :)
declare variable $encchars:Eta           := "&#919;";        (: Greek capital letter Eta :)
declare variable $encchars:Theta         := "&#920;";        (: Greek capital letter Theta :)
declare variable $encchars:Iota          := "&#921;";        (: Greek capital letter Iota :)
declare variable $encchars:Kappa         := "&#922;";        (: Greek capital letter Kappa :)
declare variable $encchars:Lambda        := "&#923;";        (: Greek capital letter Lambda :)
declare variable $encchars:Mu            := "&#924;";        (: Greek capital letter Mu :)
declare variable $encchars:Nu            := "&#925;";        (: Greek capital letter Nu :)
declare variable $encchars:Xi            := "&#926;";        (: Greek capital letter Xi :)
declare variable $encchars:Omicron       := "&#927;";        (: Greek capital letter Omicron :)
declare variable $encchars:Pi            := "&#928;";        (: Greek capital letter Pi :)
declare variable $encchars:Rho           := "&#929;";        (: Greek capital letter Rho :)
declare variable $encchars:Sigma         := "&#931;";        (: Greek capital letter Sigma :)
declare variable $encchars:Tau           := "&#932;";        (: Greek capital letter Tau :)
declare variable $encchars:Upsilon       := "&#933;";        (: Greek capital letter Upsilon :)
declare variable $encchars:Phi           := "&#934;";        (: Greek capital letter Phi :)
declare variable $encchars:Chi           := "&#935;";        (: Greek capital letter Chi :)
declare variable $encchars:Psi           := "&#936;";        (: Greek capital letter Psi :)
declare variable $encchars:Omega         := "&#937;";        (: Greek capital letter Omega :)
declare variable $encchars:alpha         := "&#945;";        (: Greek small letter alpha :)
declare variable $encchars:beta          := "&#946;";        (: Greek small letter beta :)
declare variable $encchars:gamma         := "&#947;";        (: Greek small letter gamma :)
declare variable $encchars:delta         := "&#948;";        (: Greek small letter delta :)
declare variable $encchars:epsilon       := "&#949;";        (: Greek small letter epsilon :)
declare variable $encchars:zeta          := "&#950;";        (: Greek small letter zeta :)
declare variable $encchars:eta           := "&#951;";        (: Greek small letter eta :)
declare variable $encchars:theta         := "&#952;";        (: Greek small letter theta :)
declare variable $encchars:iota          := "&#953;";        (: Greek small letter iota :)
declare variable $encchars:kappa         := "&#954;";        (: Greek small letter kappa :)
declare variable $encchars:lambda        := "&#955;";        (: Greek small letter lambda :)
declare variable $encchars:mu            := "&#956;";        (: Greek small letter mu :)
declare variable $encchars:nu            := "&#957;";        (: Greek small letter nu :)
declare variable $encchars:xi            := "&#958;";        (: Greek small letter xi :)
declare variable $encchars:omicron       := "&#959;";        (: Greek small letter omicron :)
declare variable $encchars:pi            := "&#960;";        (: Greek small letter pi :)
declare variable $encchars:rho           := "&#961;";        (: Greek small letter rho :)
declare variable $encchars:sigmaf        := "&#962;";        (: Greek small letter final sigma :)
declare variable $encchars:sigma         := "&#963;";        (: Greek small letter sigma :)
declare variable $encchars:tau           := "&#964;";        (: Greek small letter tau :)
declare variable $encchars:upsilon       := "&#965;";        (: Greek small letter upsilon :)
declare variable $encchars:phi           := "&#966;";        (: Greek small letter phi :)
declare variable $encchars:chi           := "&#967;";        (: Greek small letter chi :)
declare variable $encchars:psi           := "&#968;";        (: Greek small letter psi :)
declare variable $encchars:omega         := "&#969;";        (: Greek small letter omega :)
declare variable $encchars:thetasym      := "&#977;";        (: Greek theta symbol :)
declare variable $encchars:upsih         := "&#978;";        (: Greek Upsilon with hook symbol :)
declare variable $encchars:piv           := "&#982;";        (: Greek pi symbol :)
declare variable $encchars:ensp          := "&#8194;";       (: en space[d] :)
declare variable $encchars:emsp          := "&#8195;";       (: em space[d] :)
declare variable $encchars:thinsp        := "&#8201;";       (: thin space[d] :)
declare variable $encchars:zwnj          := "&#8204;";       (: zero-width non-joiner :)
declare variable $encchars:zwj           := "&#8205;";       (: zero-width joiner :)
declare variable $encchars:lrm           := "&#8206;";       (: left-to-right mark :)
declare variable $encchars:rlm           := "&#8207;";       (: right-to-left mark :)
declare variable $encchars:ndash         := "&#8211;";       (: en dash :)
declare variable $encchars:mdash         := "&#8212;";       (: em dash :)
declare variable $encchars:lsquo         := "&#8216;";       (: left single quotation mark :)
declare variable $encchars:rsquo         := "&#8217;";       (: right single quotation mark :)
declare variable $encchars:sbquo         := "&#8218;";       (: single low-9 quotation mark :)
declare variable $encchars:ldquo         := "&#8220;";       (: left double quotation mark :)
declare variable $encchars:rdquo         := "&#8221;";       (: right double quotation mark :)
declare variable $encchars:bdquo         := "&#8222;";       (: double low-9 quotation mark :)
declare variable $encchars:dagger        := "&#8224;";       (: dagger, obelisk :)
declare variable $encchars:Dagger        := "&#8225;";       (: double dagger, double obelisk :)
declare variable $encchars:bull          := "&#8226;";       (: bullet (black small circle)[f] :)
declare variable $encchars:hellip        := "&#8230;";       (: horizontal ellipsis (three dot leader) :)
declare variable $encchars:permil        := "&#8240;";       (: per mille sign :)
declare variable $encchars:prime         := "&#8242;";       (: prime (minutes, feet) :)
declare variable $encchars:Prime         := "&#8243;";       (: double prime (seconds, inches) :)
declare variable $encchars:lsaquo        := "&#8249;";       (: single left-pointing angle quotation mark[g] :)
declare variable $encchars:rsaquo        := "&#8250;";       (: single right-pointing angle quotation mark[g] :)
declare variable $encchars:oline         := "&#8254;";       (: overline (spacing overscore) :)
declare variable $encchars:frasl         := "&#8260;";       (: fraction slash (solidus) :)
declare variable $encchars:euro          := "&#8364;";       (: euro sign :)
declare variable $encchars:image         := "&#8465;";       (: black-letter capital I (imaginary part) :)
declare variable $encchars:weierp        := "&#8472;";       (: script capital P (power set, Weierstrass p) :)
declare variable $encchars:real          := "&#8476;";       (: black-letter capital R (real part symbol) :)
declare variable $encchars:trade         := "&#8482;";       (: trademark symbol :)
declare variable $encchars:alefsym       := "&#8501;";       (: alef symbol (first transfinite cardinal)[h] :)
declare variable $encchars:larr          := "&#8592;";       (: leftwards arrow :)
declare variable $encchars:uarr          := "&#8593;";       (: upwards arrow :)
declare variable $encchars:rarr          := "&#8594;";       (: rightwards arrow :)
declare variable $encchars:darr          := "&#8595;";       (: downwards arrow :)
declare variable $encchars:harr          := "&#8596;";       (: left right arrow :)
declare variable $encchars:crarr         := "&#8629;";       (: downwards arrow with corner leftwards (carriage return) :)
declare variable $encchars:lArr          := "&#8656;";       (: leftwards double arrow[i] :)
declare variable $encchars:uArr          := "&#8657;";       (: upwards double arrow :)
declare variable $encchars:rArr          := "&#8658;";       (: rightwards double arrow[j] :)
declare variable $encchars:dArr          := "&#8659;";       (: downwards double arrow :)
declare variable $encchars:hArr          := "&#8660;";       (: left right double arrow :)
declare variable $encchars:forall        := "&#8704;";       (: for all :)
declare variable $encchars:part          := "&#8706;";       (: partial differential :)
declare variable $encchars:exist         := "&#8707;";       (: there exists :)
declare variable $encchars:empty         := "&#8709;";       (: empty set (null set); see also U+8960, ⌀ :)
declare variable $encchars:nabla         := "&#8711;";       (: del or nabla (vector differential operator) :)
declare variable $encchars:isin          := "&#8712;";       (: element of :)
declare variable $encchars:notin         := "&#8713;";       (: not an element of :)
declare variable $encchars:ni            := "&#8715;";       (: contains as member :)
declare variable $encchars:prod          := "&#8719;";       (: n-ary product (product sign)[k] :)
declare variable $encchars:sum           := "&#8721;";       (: n-ary summation[l] :)
declare variable $encchars:minus         := "&#8722;";       (: minus sign :)
declare variable $encchars:lowast        := "&#8727;";       (: asterisk operator :)
declare variable $encchars:radic         := "&#8730;";       (: square root (radical sign) :)
declare variable $encchars:prop          := "&#8733;";       (: proportional to :)
declare variable $encchars:infin         := "&#8734;";       (: infinity :)
declare variable $encchars:ang           := "&#8736;";       (: angle :)
declare variable $encchars:and           := "&#8743;";       (: logical and (wedge) :)
declare variable $encchars:or            := "&#8744;";       (: logical or (vee) :)
declare variable $encchars:cap           := "&#8745;";       (: intersection (cap) :)
declare variable $encchars:cup           := "&#8746;";       (: union (cup) :)
declare variable $encchars:int           := "&#8747;";       (: integral :)
declare variable $encchars:there4        := "&#8756;";       (: therefore sign :)
declare variable $encchars:sim           := "&#8764;";       (: tilde operator (varies with, similar to)[m] :)
declare variable $encchars:cong          := "&#8773;";       (: congruent to :)
declare variable $encchars:asymp         := "&#8776;";       (: almost equal to (asymptotic to) :)
declare variable $encchars:ne            := "&#8800;";       (: not equal to :)
declare variable $encchars:equiv         := "&#8801;";       (: identical to; sometimes used for 'equivalent to' :)
declare variable $encchars:le            := "&#8804;";       (: less-than or equal to :)
declare variable $encchars:ge            := "&#8805;";       (: greater-than or equal to :)
declare variable $encchars:sub           := "&#8834;";       (: subset of :)
declare variable $encchars:sup           := "&#8835;";       (: superset of[n] :)
declare variable $encchars:nsub          := "&#8836;";       (: not a subset of :)
declare variable $encchars:sube          := "&#8838;";       (: subset of or equal to :)
declare variable $encchars:supe          := "&#8839;";       (: superset of or equal to :)
declare variable $encchars:oplus         := "&#8853;";       (: circled plus (direct sum) :)
declare variable $encchars:otimes        := "&#8855;";       (: circled times (vector product) :)
declare variable $encchars:perp          := "&#8869;";       (: up tack (orthogonal to, perpendicular)[o] :)
declare variable $encchars:sdot          := "&#8901;";       (: dot operator[p] :)
declare variable $encchars:lceil         := "&#8968;";       (: left ceiling (APL upstile) :)
declare variable $encchars:rceil         := "&#8969;";       (: right ceiling :)
declare variable $encchars:lfloor        := "&#8970;";       (: left floor (APL downstile) :)
declare variable $encchars:rfloor        := "&#8971;";       (: right floor :)
declare variable $encchars:lang          := "&#9001;";       (: left-pointing angle bracket (bra)[q] :)
declare variable $encchars:rang          := "&#9002;";       (: right-pointing angle bracket (ket)[r] :)
declare variable $encchars:loz           := "&#9674;";       (: lozenge :)
declare variable $encchars:spades        := "&#9824;";       (: black spade suit[f] :)
declare variable $encchars:clubs         := "&#9827;";       (: black club suit (shamrock)[f] :)
declare variable $encchars:hearts        := "&#9829;";       (: black heart suit (valentine)[f] :)
declare variable $encchars:diams         := "&#9830;";       (: black diamond suit[f] :)
